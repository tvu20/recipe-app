// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Recipe {
  id              Int  @id @default(autoincrement())
  createdAt       DateTime @default(now())
  title           String 
  ingredients     Ingredient[]
  spices          String[]
  instructions    String[]
  tags            Tag[]
  comments        Comment[]
  notes           String @default("")
  author          User?@relation(fields:[authorId], references:[id])
  authorId        String?
}

model Ingredient {
  id        Int  @id @default(autoincrement())
  name      String
  recipe    Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId  Int?
  quantity  String
}

model Tag {
  id        Int  @id @default(autoincrement())
  name      String @unique
  recipes   Recipe[]
}

model Comment {
  id        String    @id @default(cuid())
  createdAt       DateTime @default(now())
  message   String
  author          User?@relation(fields:[authorId], references:[id])
  authorId        String?
  recipe    Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId  Int?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  recipes       Recipe[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}